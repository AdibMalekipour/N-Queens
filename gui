import tkinter as tk
from tkinter import messagebox
import ttkbootstrap as ttk
from ttkbootstrap.constants import *
from algorithms.backtracking import solve_n_queens
from algorithms.genetic import solve_n_queens_genetic

class NQueensApp:
    def __init__(self):
        self.root = ttk.Window(themename="darkly")
        self.root.title("N-Queens Solver")
        self.root.geometry("600x700")

        self.canvas_size = 400
        self.canvas = tk.Canvas(self.root, width=self.canvas_size, height=self.canvas_size,
                                bg="#2c2c2c", highlightthickness=0)
        self.canvas.pack(pady=20)

        self.input_frame = ttk.Frame(self.root)
        self.input_frame.pack(pady=10)

        ttk.Label(self.input_frame, text="Board Size (n <= 8):", font=("Helvetica", 12)).pack(side=LEFT, padx=5)
        self.entry = ttk.Entry(self.input_frame, width=5, font=("Helvetica", 12))
        self.entry.pack(side=LEFT, padx=5)

        self.method = tk.StringVar(value="backtracking")
        self.radio_frame = ttk.Frame(self.root)
        self.radio_frame.pack(pady=10)

        ttk.Radiobutton(self.radio_frame, text="Backtracking", variable=self.method, value="backtracking",
                        bootstyle=INFO).pack(side=LEFT, padx=10)
        ttk.Radiobutton(self.radio_frame, text="Genetic Algorithm", variable=self.method, value="genetic",
                        bootstyle=INFO).pack(side=LEFT, padx=10)

        self.solve_button = ttk.Button(self.root, text="Solve", command=self.draw_solution,
                                       bootstyle=(PRIMARY, "btn-lg"), padding=(20, 10))
        self.solve_button.pack(pady=10)

        self.result_label = ttk.Label(self.root, text="", font=("Helvetica", 10),
                                      wraplength=500, bootstyle="light")
        self.result_label.pack(pady=10)

    def draw_solution(self):
        self.solve_button.configure(state=DISABLED)
        self.root.update()

        self.canvas.delete("all")
        try:
            n = int(self.entry.get())
            if n > 8 or n < 1:
                messagebox.showerror("Error", "Please enter a number less than or equal to 8 and greater than 0")
                self.solve_button.configure(state=NORMAL)
                return
        except ValueError:
            messagebox.showerror("Error", "Please enter a valid number")
            self.solve_button.configure(state=NORMAL)
            return

        if self.method.get() == "backtracking":
            solution = solve_n_queens(n)
        else:
            solution = solve_n_queens_genetic(n)

        cell_size = self.canvas_size // n
        for row in range(n):
            for col in range(n):
                x1 = col * cell_size
                y1 = row * cell_size
                x2 = x1 + cell_size
                y2 = y1 + cell_size
                fill = "#f0f0f0" if (row + col) % 2 == 0 else "#a0a0a0"
                self.canvas.create_rectangle(x1, y1, x2, y2, fill=fill, outline="#606060")
                if solution and row < len(solution) and solution[row] == col:
                    self.canvas.create_oval(x1 + 10, y1 + 10, x2 - 10, y2 - 10,
                                            fill="#ff5555", outline="#cc0000")
                    self.canvas.create_text(x1 + cell_size // 2, y1 + cell_size // 2,
                                            text="â™•", font=("Arial", cell_size // 2), fill="black")

        self.solve_button.configure(state=NORMAL)

    def run(self):
        self.root.mainloop()
